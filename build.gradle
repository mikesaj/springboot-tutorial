plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
	id 'jacoco'
	id 'com.diffplug.spotless' version '5.0.0'
}

group = 'tech.orangeblue'
version = '0.0.1-SNAPSHOT'
// sourceCompatibility = '11'
sourceCompatibility = 1.8

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.spring.io/libs-snapshot' }
	maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {

	println "No Version specified in settings.gradle"

	implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.6'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.5.5'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.6'
	implementation 'com.google.code.gson:gson:2.8.8'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.mockito:mockito-inline:4.0.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
}

// Jacoco Implementation
jacoco {
	toolVersion = "0.8.5"
}

test {
	// useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/reports/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/reports/jacoco/classpathdumps")
	}
}

jacocoTestReport {
	reports {
		csv {
			enabled true
			destination file("$buildDir/reports/jacoco/jacoco.csv")
		}
		xml {
			enabled true
			destination file("$buildDir/reports/jacoco/jacocoTest.xml")
		}
		html {
			enabled true
			destination file("$buildDir/reports/jacoco")
		}
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, excludes: [ 'tech/orangeblue/springboottutorial/model/**' ]) }))
		}
	}
}


jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [ 'tech/orangeblue/springboottutorial/model/**' ]) }))
	}
	violationRules {
		rule {
			enabled = true
			limit {
				counter = 'BRANCH'
				minimum = 1.0
			}
		}

		rule {
			enabled = true
			limit {
				counter = 'LINE'
				minimum = 0.90
			}
		}
	}
}

jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification


spotless {
	java {
		eclipse().configFile 'format.xml'
//		 licenseHeaderFile 'LICENSE'
		target project.fileTree(project.rootDir) {
			include '**/*.java'
			exclude 'LICENSE'
			exclude '**/build/**'
		}
		enforceCheck true
	}
}